import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB\
msg = pd.read_csv('navietext.csv')
msg
msg['labelnum']=msg.label.map({'pos':1,'neg':0})
X=msg.Message
y=msg.labelnum
xtrain,xtest,ytrain,ytest = train_test_split(X,y)
print(ytrain.shape)
print(ytest.shape)
cv = CountVectorizer()
xtrain_dtm = cv.fit_transform(xtrain)
xtest_dtm = cv.transform(xtest)
print(cv.get_feature_names())
df = pd.DataFrame(xtrain_dtm.toarray(),columns=cv.get_feature_names())
clf = MultinomialNB().fit(xtrain_dtm,ytrain)
predicted = clf.predict(xtest_dtm)
from sklearn import metrics
print("Accuracy Classifier is ",metrics.accuracy_score(ytest,predicted))
print(metrics.confusion_matrix(ytest,predicted))
print('Value of precision',metrics.precision_score(ytest,predicted))
print('value of recall',metrics.recall_score(ytest,predicted))



------------------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////////////
                                    or
///////////////////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------------------
import pandas as pd
import numpy as np
df=pd.read_csv("text_classification.csv")
df_train=df[:10]
pos=""
neg=""
df_train=np.array(df_train)
vocab=[]
poscnt=0
negcnt=0
for i in range(len(df_train)):
  if df_train[i][1]=='pos':
    pos=pos+" "+df_train[i][0]
    poscnt+=1
  else:
    neg=neg+" "+df_train[i][0]
    negcnt+=1
  vocab.extend(df_train[i][0].split(" "))
vocab=set(vocab)
n_yes=len(set(pos.split(" ")))
n_no=len(set(neg.split(" ")))
d={}
for i in vocab:
  res=[]
  #computing for yes
  nk_yes=pos.count(i)
  res.append((nk_yes+1)/(n_yes+len(vocab)))
  nk_no=neg.count(i)
  res.append((nk_no+1)/(n_no+len(vocab)))
  d[i]=res
#preproccesing done
for i in d.keys():
  print(i,d[i])
df_test=df[11:]
df_test=np.array(df_test)
tp=0
fp=0
tn=0
fn=0
for i in range(len(df_test)):
  pyes=poscnt/10
  pno=negcnt/10
  words=df_test[i][0].split(" ")
  for word in words:
    if word in d.keys():
      pyes*=d[word][0]
      pno*=d[word][1]
    if pyes>pno:
      if df_test[i][1]=='pos':
        tp+=1
      else:
        fp+=1
    if pno>pyes:
      if df_test[i][1]=='neg':
        tn+=1
      else:
        fn+=1
precision=(tp)/(tp+fp)
recall=(tp)/(tp+fn)

print(precision)
print(recall)
